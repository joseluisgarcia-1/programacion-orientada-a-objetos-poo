- Módulo Bienvenida e Introducción
***Clase 1 ¿Por qué aprender Programación Orientada a Objetos?***

- Vas a programar más rápido. Tener un análisis previo de lo que estás realizando te ayudará a generar código mucho más veloz

- Dejas de ser Programador Jr. Podrás responder preguntas como ¿Qué es encapsulamiento?, ¿Qué es Abstracción?, ¿Qué es Herencia?, ¿Qué es Polimorfismo? 
en futuras entrevistas de trabajo

- Dejar de Copiar y Pegar Código.

La programación orientada a objetos tiene cuatro características principales:

- Encapsulamiento. 
    - Quiere decir que oculta datos mediante código.
- Abstracción. 
    - Es como se pueden representar los objetos en modo de código.
- Herencia. 
    - Es donde una clase nueva se crea a partir de una clase existente.
- Polimorfismo.
    - Se refiere a la propiedad por la que es posible enviar mensajes sintácticamente iguales a objetos de tipos distintos.
En este curso, los pasos a seguir será.
Analisis
Plasmar
Programar
La mayoría solo aprende a hacer esto en un lenguajes de programación,aquí se tiene una variabilidad.

***Clase 2 ¿Qué resuelve la Programación Orientada a Objetos?***

La programación orientada a objetos nos ayuda a tapar o resolver muchos de los huecos que ha dejado la programación estructurada
La programación Orientada a Objetos nace de los problemas creados por la programación estructurada y nos ayuda a resolver cierto problemas como:

Código muy largo: A medida que un sistema va creciendo y se hace más robusta el código generado se vuelve muy extenso haciéndose difícil de leer, depurar, mantener.

Si algo falla, todo se rompe: Ya que con la programación estructurada el código se ejecuta secuencialmente al momento de que una de esas líneas fallara todo lo demás 
deja de funcionar.

Difícil de mantener.

La POO Nos va a simplificar la programación

***Clase 3 Paradigma Orientado a Objetos***

La Programación Orientada a Objetos viene de una filosofía o forma de pensar que es la Orientación a Objetos y 
esto surge a partir de los problemas que necesitamos plasmar en código.

Es analizar un problema en forma de objetos para después llevarlo a código, eso es la Orientación a Objetos.

Un paradigma es una teoría que suministra la base y modelo para resolver problemas. El paradigma de Programación Orientada a Objetos se compone de 4 elementos:

- Clases
- Propiedades
- Métodos
y estos tres juntos se convierten o transforman en un objeto
- Objetos

Y 4 Pilares:

Encapsulamiento
Abstracción
Herencia
Polimorfismo

***Clase 4 Lenguajes Orientados a Objetos***

Java - .java
    - Orientado a objetos naturalmente
    - Android
    - Server side
PHP - .php
    - Lenguaje interpretado
    - Pensado para la web
    - Navegador va interpretando sin máquina
JavaScript - .js
    - Lenguaje interpretado
    - Orientado a objetos pero basado en prototipos
    - Pensado para la web
Python - .py
    - Diseñado para ser fácil de usar
    - Múltiples usos:
        - Web, server, Side, Análisis de datos, Machine learning

***Clase 5 Instalando Visual Studio Code***

Pues que comience la aventura y digo aventura porque te darás cuenta de lo emocionante que será poder trabajar 4 lenguajes de programación en un solo entorno de desarrollo y sí, precisamente eso es lo que nos resuelve Visual Studio Code el cual será nuestro campeón en este curso.

Visual Studio Code lo puedes encontrar en las tres versiones básicas de Sistema Operativo (Windows, Mac y Linux) y lo puedes descargar directo en este enlace: https://code.visualstudio.com/download. Es muy ligero y basta con un Siguiente, siguiente, siguiente para instalar.

1.png
Cuando la instalación haya finalizado verás algo como esto:

2.png
¡Súper! Todo salió bien. Ahora pasemos a configurarlo para cada lenguaje.

Primero ubica la sección de Extensiones o en inglés Extensions, además de la barra de Search porque estaremos buscando la extensión para cada lenguaje.

3.png
Java
En la barra de Search Extensions escribe: Java Extension Pack y da clic en el botón verde Install.

4.png
Ahora, para tener una mejor experiencia en Debugging, instala el Debugger for Java, el cual encuentras siguiendo el procedimiento anterior.

5.png
Listo, terminamos con Java. Aprende más en este enlace: https://code.visualstudio.com/docs/languages/java

Ahora vamos por Python.

Python
Comencemos instalando Python en nuestra computadora. Dirígete al sitio python.org y dale clic en el botón de Descargar.

6.png
Ve de la mano con el asistente hasta finalizar la instalación:

7.png
Terminaremos la configuración de Python en Visual Studio Code más adelante. Aprende más aquí.

Mientras tanto sigamos con PHP.

PHP
Primero necesitamos instalar el intérprete de PHP, la forma más fácil es descargando XAMPP:

Descarga XAMPP

Puedes descargarlo tanto para Linux, Windows o macOS.

XAMPP.png
Una vez descargado simplemente debes abrirlo e instalarlo dando click al botón de “Next” como cualquier programa normal. Si te sale una ventana de permisos de Firewall simplemente permite ambas opciones:

Captura de pantalla de 2021-09-10 10-33-21.png
Con el intérprete instalado, para configurar PHP buscaremos la extensión PHP Server y pulsamos “Instalar”

8.png
Ahora debemos asegurarnos de que PHP y la extensión estén conectados. Para ello, en Visual Studio Code nos vamos a settings:

settings.png
Y aquí buscamos “PHP Server”, nos debería aparecer algo como esto:

php path.png
En el apartado Phpserver: PHP Config Path debe decir: C:\xampp\php\php.ini.
En el apartado Phpserver: PHP Path debe decir: C:\xampp\php\php.exe.
❗ Estas rutas pueden variar si durante la instalación de XAMPP cambiaste el directorio de instalación, o si tu Windows está instalado en otro disco que no sea el disco C:.

¡Con esto ya tienes PHP instalado!. Puedes aprender más en la ruta de Desarrollo Web Backend con PHP

JavaScript
En este caso no necesitamos instalar absolutamente nada, utilizaremos el editor con su configuración por defecto.

Comencemos nuestro proyecto
Ya está todo listo, ahora dejemos creado el proyecto.

Para esto seleccionaremos la opción Add workspace folder

9.png
A continuación creamos una carpeta llamada CursoPOOUber y damos clic en Add para finalizar. Ahora generemos esta estructura de carpetas para manejar los documentos correspondientes al lenguaje de programación:

10.png
Ahora que tenemos listo nuestro sistema de archivos terminemos la configuración de Python en VSC, vamos al menú View -> Command Palette y escribimos python “Seleccionar intérprete”, tal como se muestra en la figura.

11.png
¡Ya terminamos, estamos listos!

***Clase 6 Diagramas de Modelado***

Modelado de un problema en específico


- OMT
    - Object modeling techniques
        - Este fue creado en 1991 pero ya está obsoleto, fue reemplazado por UML
        - Es una metodología para el análisis orientado a objetos
- UML 
    - Unified Modeling Language - Lenguaje de modelo unificado
        - Este está vigente y fue creado en 1997
        - Podemos modelar lo siguiente
            - Clases
            - Casos de uso
            - Objetos
            - Actividades
            - Iteraciones
            - Estados
            - Implementación
            - Entre otros


***Clase 7 Qué es UML***

Como ya viste UML significa Unified Modeling Language el cual es un lenguaje estándar de modelado de sistemas orientados a objetos.

220px-UML_logo.svg.png
Esto significa que tendremos una manera gráfica de representar una situación, justo como hemos venido viendo. A continuación te voy a presentar los elementos que puedes utilizar para hacer estas representaciones.

Las clases se representan así:

clase.png
En la parte superior se colocan los atributos o propiedades, y debajo las operaciones de la clase. Notarás que el primer caracter con el que empiezan es un símbolo. Este denotará la visibilidad del atributo o método, esto es un término que tiene que ver con Encapsulamiento y veremos más adelante a detalle.

Estos son los niveles de visibilidad que puedes tener:

- private
+ public
# protected
~ default

Una forma de representar las relaciones que tendrá un elemento con otro es a través de las flechas en UML, y aquí tenemos varios tipos, estos son los más comunes:

Asociación
associacion.png
Como su nombre lo dice, notarás que cada vez que esté referenciada este tipo de flecha significará que ese elemento contiene al otro en su definición. La flecha apuntará hacia la dependencia.

uml-relacion-asociacion.jpg
Con esto vemos que la ClaseA está asociada y depende de la ClaseB.

Herencia
herencia.png
Siempre que veamos este tipo de flecha se estará expresando la herencia.
La dirección de la flecha irá desde el hijo hasta el padre.

herencia-clases.png
Con esto vemos que la ClaseB hereda de la ClaseA

Agregación
agregacion.png
Este se parece a la asociación en que un elemento dependerá del otro, pero en este caso será: Un elemento dependerá de muchos otros. Aquí tomamos como referencia la multiplicidad del elemento. Lo que comúnmente conocerías en Bases de Datos como Relaciones uno a muchos.

uml-relacion-agregacion.jpg
Con esto decimos que la ClaseA contiene varios elementos de la ClaseB. Estos últimos son comúnmente representados con listas o colecciones de datos.

Composición
composicion.png
Este es similar al anterior solo que su relación es totalmente compenetrada de tal modo que conceptualmente una de estas clases no podría vivir si no existiera la otra.

uml-relacion-composicion.jpg
Con esto terminamos nuestro primer módulo. Vamos al siguiente para entender cómo podemos hacer un análisis y utilizar estos elementos para construir nuestro diagrama de clases de Uber.

***Clase 8 Objetos***

***Clase 9 Abstracción y Clases***

***Clase 10 Modularidad***

***Clase 11 Analizando Uber en Objetos***

***Clase 12 Reto 1: identificando objetos***

- Módulo Programación Orientada a Objetos. Análisis
***Clase 13 Clases en UML y su sintaxis en código***

***Clase 14 Modelando nuestros objetos Uber***

***Clase 15 ¿Qué es la herencia?***

***Clase 16 Aplicando Herencia a nuestro proyecto Uber***

***Clase 17 Reto 2: analicemos un problema***

- Módulo Clases, Objetos y Método Constructor

***Clase 18 Creando nuestras carpetas iniciales para el curso***

***Clase 19 Definiendo clases en Java y Python***

***Clase 20 Definiendo Clases en JavaScript***

***Clase 21 Objetos, método constructor y su sintaxis en código***

***Clase 22 Objetos. Dando vida a nuestras clases en Java y Python***

***Clase 23 Declarando un Método Constructor en Java y JavaScript***

***Clase 24 JavaScript orientado a objetos, lo más nuevo***

***Clase 25 Declarando un método constructor en Python***

- Módulo Herencia
***Clase 26 Aplicando herencia en lenguaje Java y PHP***

***Clase 27 Solución del reto de herencia en PHP***

***Clase 28 Aplicando herencia en lenguaje Python y JavaScript***

***Clase 29 Otros tipos de Herencia***

***Clase 30 Reto 4***

- Módulo Encapsulamiento

***Clase 31 Encapsulamiento***

***Clase 32 Encapsulando atributos en Java***

- Módulo Polimorfismo
***Clase 33 Generando polimorfismo en Java***

***Clase 34 Generando polimorfismo en PHP***

- Módulo Cierre del curso
***Clase 35 El Diagrama UML de Uber***

***Clase 36 Conclusiones***

***Clase 37 Bonus: Qué es la Programación Orientada a Objetos***