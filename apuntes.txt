- Módulo Bienvenida e Introducción
***Clase 1 ¿Por qué aprender Programación Orientada a Objetos?***

- Vas a programar más rápido. Tener un análisis previo de lo que estás realizando te ayudará a generar código mucho más veloz

- Dejas de ser Programador Jr. Podrás responder preguntas como ¿Qué es encapsulamiento?, ¿Qué es Abstracción?, ¿Qué es Herencia?, ¿Qué es Polimorfismo? 
en futuras entrevistas de trabajo

- Dejar de Copiar y Pegar Código.

La programación orientada a objetos tiene cuatro características principales:

- Encapsulamiento. 
    - Quiere decir que oculta datos mediante código.
- Abstracción. 
    - Es como se pueden representar los objetos en modo de código.
- Herencia. 
    - Es donde una clase nueva se crea a partir de una clase existente.
- Polimorfismo.
    - Se refiere a la propiedad por la que es posible enviar mensajes sintácticamente iguales a objetos de tipos distintos.
En este curso, los pasos a seguir será.
Analisis
Plasmar
Programar
La mayoría solo aprende a hacer esto en un lenguajes de programación,aquí se tiene una variabilidad.

***Clase 2 ¿Qué resuelve la Programación Orientada a Objetos?***

La programación orientada a objetos nos ayuda a tapar o resolver muchos de los huecos que ha dejado la programación estructurada
La programación Orientada a Objetos nace de los problemas creados por la programación estructurada y nos ayuda a resolver cierto problemas como:

Código muy largo: A medida que un sistema va creciendo y se hace más robusta el código generado se vuelve muy extenso haciéndose difícil de leer, depurar, mantener.

Si algo falla, todo se rompe: Ya que con la programación estructurada el código se ejecuta secuencialmente al momento de que una de esas líneas fallara todo lo demás 
deja de funcionar.

Difícil de mantener.

La POO Nos va a simplificar la programación

***Clase 3 Paradigma Orientado a Objetos***

La Programación Orientada a Objetos viene de una filosofía o forma de pensar que es la Orientación a Objetos y 
esto surge a partir de los problemas que necesitamos plasmar en código.

Es analizar un problema en forma de objetos para después llevarlo a código, eso es la Orientación a Objetos.

Un paradigma es una teoría que suministra la base y modelo para resolver problemas. El paradigma de Programación Orientada a Objetos se compone de 4 elementos:

- Clases
- Propiedades
- Métodos
y estos tres juntos se convierten o transforman en un objeto
- Objetos

Y 4 Pilares:

Encapsulamiento
Abstracción
Herencia
Polimorfismo

***Clase 4 Lenguajes Orientados a Objetos***

Java - .java
    - Orientado a objetos naturalmente
    - Android
    - Server side
PHP - .php
    - Lenguaje interpretado
    - Pensado para la web
    - Navegador va interpretando sin máquina
JavaScript - .js
    - Lenguaje interpretado
    - Orientado a objetos pero basado en prototipos
    - Pensado para la web
Python - .py
    - Diseñado para ser fácil de usar
    - Múltiples usos:
        - Web, server, Side, Análisis de datos, Machine learning

***Clase 5 Instalando Visual Studio Code***

Pues que comience la aventura y digo aventura porque te darás cuenta de lo emocionante que será poder trabajar 4 lenguajes de programación en un solo entorno de desarrollo y sí, precisamente eso es lo que nos resuelve Visual Studio Code el cual será nuestro campeón en este curso.

Visual Studio Code lo puedes encontrar en las tres versiones básicas de Sistema Operativo (Windows, Mac y Linux) y lo puedes descargar directo en este enlace: https://code.visualstudio.com/download. Es muy ligero y basta con un Siguiente, siguiente, siguiente para instalar.

1.png
Cuando la instalación haya finalizado verás algo como esto:

2.png
¡Súper! Todo salió bien. Ahora pasemos a configurarlo para cada lenguaje.

Primero ubica la sección de Extensiones o en inglés Extensions, además de la barra de Search porque estaremos buscando la extensión para cada lenguaje.

3.png
Java
En la barra de Search Extensions escribe: Java Extension Pack y da clic en el botón verde Install.

4.png
Ahora, para tener una mejor experiencia en Debugging, instala el Debugger for Java, el cual encuentras siguiendo el procedimiento anterior.

5.png
Listo, terminamos con Java. Aprende más en este enlace: https://code.visualstudio.com/docs/languages/java

Ahora vamos por Python.

Python
Comencemos instalando Python en nuestra computadora. Dirígete al sitio python.org y dale clic en el botón de Descargar.

6.png
Ve de la mano con el asistente hasta finalizar la instalación:

7.png
Terminaremos la configuración de Python en Visual Studio Code más adelante. Aprende más aquí.

Mientras tanto sigamos con PHP.

PHP
Primero necesitamos instalar el intérprete de PHP, la forma más fácil es descargando XAMPP:

Descarga XAMPP

Puedes descargarlo tanto para Linux, Windows o macOS.

XAMPP.png
Una vez descargado simplemente debes abrirlo e instalarlo dando click al botón de “Next” como cualquier programa normal. Si te sale una ventana de permisos de Firewall simplemente permite ambas opciones:

Captura de pantalla de 2021-09-10 10-33-21.png
Con el intérprete instalado, para configurar PHP buscaremos la extensión PHP Server y pulsamos “Instalar”

8.png
Ahora debemos asegurarnos de que PHP y la extensión estén conectados. Para ello, en Visual Studio Code nos vamos a settings:

settings.png
Y aquí buscamos “PHP Server”, nos debería aparecer algo como esto:

php path.png
En el apartado Phpserver: PHP Config Path debe decir: C:\xampp\php\php.ini.
En el apartado Phpserver: PHP Path debe decir: C:\xampp\php\php.exe.
❗ Estas rutas pueden variar si durante la instalación de XAMPP cambiaste el directorio de instalación, o si tu Windows está instalado en otro disco que no sea el disco C:.

¡Con esto ya tienes PHP instalado!. Puedes aprender más en la ruta de Desarrollo Web Backend con PHP

JavaScript
En este caso no necesitamos instalar absolutamente nada, utilizaremos el editor con su configuración por defecto.

Comencemos nuestro proyecto
Ya está todo listo, ahora dejemos creado el proyecto.

Para esto seleccionaremos la opción Add workspace folder

9.png
A continuación creamos una carpeta llamada CursoPOOUber y damos clic en Add para finalizar. Ahora generemos esta estructura de carpetas para manejar los documentos correspondientes al lenguaje de programación:

10.png
Ahora que tenemos listo nuestro sistema de archivos terminemos la configuración de Python en VSC, vamos al menú View -> Command Palette y escribimos python “Seleccionar intérprete”, tal como se muestra en la figura.

11.png
¡Ya terminamos, estamos listos!

***Clase 6 Diagramas de Modelado***

Modelado de un problema en específico

- OMT
    - Object modeling techniques
        - Este fue creado en 1991 pero ya está obsoleto, fue reemplazado por UML
        - Es una metodología para el análisis orientado a objetos
- UML 
    - Unified Modeling Language - Lenguaje de modelo unificado
        - Este está vigente y fue creado en 1997
        - Podemos modelar lo siguiente
            - Clases
            - Casos de uso
            - Objetos
            - Actividades
            - Iteraciones
            - Estados
            - Implementación
            - Entre otros


***Clase 7 Qué es UML***

Como ya viste UML significa Unified Modeling Language el cual es un lenguaje estándar de modelado de sistemas orientados a objetos.

220px-UML_logo.svg.png
Esto significa que tendremos una manera gráfica de representar una situación, justo como hemos venido viendo. A continuación te voy a presentar los elementos que puedes utilizar para hacer estas representaciones.

Las clases se representan así:

clase.png
En la parte superior se colocan los atributos o propiedades, y debajo las operaciones de la clase. Notarás que el primer caracter con el que empiezan es un símbolo. Este denotará la visibilidad del atributo o método, esto es un término que tiene que ver con Encapsulamiento y veremos más adelante a detalle.

Estos son los niveles de visibilidad que puedes tener:

- private
+ public
# protected
~ default

Una forma de representar las relaciones que tendrá un elemento con otro es a través de las flechas en UML, y aquí tenemos varios tipos, estos son los más comunes:

Asociación
associacion.png
Como su nombre lo dice, notarás que cada vez que esté referenciada este tipo de flecha significará que ese elemento contiene al otro en su definición. La flecha apuntará hacia la dependencia.

uml-relacion-asociacion.jpg
Con esto vemos que la ClaseA está asociada y depende de la ClaseB.

Herencia
herencia.png
Siempre que veamos este tipo de flecha se estará expresando la herencia.
La dirección de la flecha irá desde el hijo hasta el padre.

herencia-clases.png
Con esto vemos que la ClaseB hereda de la ClaseA

Agregación
agregacion.png
Este se parece a la asociación en que un elemento dependerá del otro, pero en este caso será: Un elemento dependerá de muchos otros. Aquí tomamos como referencia la multiplicidad del elemento. Lo que comúnmente conocerías en Bases de Datos como Relaciones uno a muchos.

uml-relacion-agregacion.jpg
Con esto decimos que la ClaseA contiene varios elementos de la ClaseB. Estos últimos son comúnmente representados con listas o colecciones de datos.

Composición
composicion.png
Este es similar al anterior solo que su relación es totalmente compenetrada de tal modo que conceptualmente una de estas clases no podría vivir si no existiera la otra.

uml-relacion-composicion.jpg
Con esto terminamos nuestro primer módulo. Vamos al siguiente para entender cómo podemos hacer un análisis y utilizar estos elementos para construir nuestro diagrama de clases de Uber.

***Clase 8 Objetos***

Cuando tengamos un problema lo primero que debemos hacer es identificar el objeto

Los Objetos son aquellos que tienen propiedades y comportamientos, también serán sustantivos.

Pueden ser Físicos o Conceptuales
Las Propiedades también pueden llamarse atributos y estos también serán sustantivos. Algunos atributos o propiedades son nombre, tamaño, forma, estado, etc. 
Son todas las características del objeto.

Los Comportamientos serán todas las operaciones que el objeto puede hacer, suelen ser verbos o sustantivos y verbo.
Algunos ejemplos pueden ser que el usuario pueda hacer login y logout.
Un **Comportamiento **o método: Son las acciones u operaciones que puede realizar un objeto, es decir lo que puede hacer dicho objeto.

Objeto Perro:
atributos: nombre, color, raza, altura
comportamientos: ladrar, correr, dormir, comer

***Clase 9 Abstracción y Clases***

Una Clase es el modelo por el cual nuestros objetos se van a construir y nos van a permitir generar más objetos.

Analizamos Objetos para crear Clases. Las Clases son los modelos sobres los cuales construiremos nuestros objetos.

Abstracción es cuando separamos los datos de un objeto para generar un molde.

***Clase 10 Modularidad***

La modularidad va de la mano con el Diseño Modular, este consiste en dividir nuestro sistema en partes pequeñas que funcionen de manera independiente.

Modular: Dividir un sitema y así crear módulos independientes, lo que permite evitar un colapso masivo en nuestro código y mejorar la legibilidad.
La modularidad va muy relacionada con las clases y es un principio de la Programación Orientado a Objetos y va de la mano con el Diseño Modular que significa dividir un 
sistema en partes pequeñas y estas serán nuestros módulos pudiendo funcionar de manera independiente.

La modularidad de nuestro código nos va a permitir

Reutilizar
Evitar colapsos
Hacer nuestro código más mantenible
Legibilidad
Resolución rápida de problemas
Una buena práctica es separando las clases en archivos diferentes.


La clase:

- Modularidad
- Divide el programa en diferentes partes o módulos/clases
- Separar las clases en archivos
***Clase 11 Analizando Uber en Objetos***

se crea una carpeta en el proyecto inicial

identificados en uber
User: El usuario, persona, cliente.

Car: UberX, UberPool, UberBlack, UberVan.

Route: Ruta de un punto A al B, tu ruta de traslado.

Driver: Conductor del auto, del objeto car.

Payment: Card, Paypal, Cash, método de pago por el servicio.

Trip: Viaje realizado del punto A al B.
***Clase 12 Reto 1: identificando objetos***
Ya estás listo para resolver tu primer reto y poner en práctica todo lo que aprendiste para identificar objetos en un problema.

Toma como referencia nuestro Sistema de Adopciones e identifica todos los objetos.

0.png
Compártenos tu análisis en la sección de discusiones.
- Módulo Programación Orientada a Objetos. Análisis
***Clase 13 Clases en UML y su sintaxis en código***
- Nombre clase -> Identidad
- atributos -> Estado
- operaciones o métodos -> Comportamientos
- Java:
    - class Person{}
        Ejemplo:
            class Person{
                String name = "";
                void walk(){}
            }
- Python:
    - class Person:
        Ejemplo:
            class Person:
                name = ""
                def walk():
- JavaScript:
    - function Person(){}
        Ejemplo:
            Person.prototype.walk = function(){
            }
- PHP:
    - class Person{}
        Ejemplo:
            class Person{
                $name = "";
                function walk(){}
            }

***Clase 14 Modelando nuestros objetos Uber***

class User:
    id
    name
    document
    email
    password

class Driver:
    id
    name
    document
    email
    password

class Route:
    id
    start[]
    end[]

class Uberx:
    id
    license
    driver
    passengers
    brand
    model

class UberPool:
    id
    license
    driver
    passengers
    brand
    model

class UberBlack:
    id
    license
    driver
    passengers
    type_car_accepted[]
    seats_material[]

class UberVan:
    id
    license
    driver
    passengers
    type_car_accepted[]
    seats_material[]

class Card:
    id
    number
    code_card
    date

class Paypal:
    id
    email

class Cash:
    id

para hacer el uml Igual si eres estudiante puedes usar Lucidchart completo de forma gratuita registrandote con tu correo .edu

***Clase 15 ¿Qué es la herencia?***

Don’t repeat yourself es una filosofía que promueve la reducción de duplicación en programación, esto nos va a inculcar que no tengamos líneas de código duplicadas.

Toda pieza de información nunca debería ser duplicada debido a que incrementa la dificultad en los cambios y evolución

La herencia nos permite crear nuevas clases a partir de otras, se basa en modelos y conceptos de la vida real. También tenemos una jerarquía de padre e hijo.

He escuchado que hay programadores que no aconsejan en el trabajo usar los términos Padre e hijos ya que al llamarlos así se puede dar una mala impresión en cuanto al 
nivel profesional y de conocimiento. En un escenario laboral es mejor llamar estas relaciones con los nombres Súperclase y Subclase y solo usar Padre e hijos 
para enseñar y entender la idea de herencia (como el caso de este curso) y entre compañeros de confianza.

- DRY: Don't repeat yourself: No te repitas
    - Promueve la reducción de duplicación en programación
    - Toda pieza de información nunca debería ser duplicada debido a que la duplicación incrementa la dificultad en cambios y evolución
    
La Reutilización es uno de los principios de la POO

***Clase 16 Aplicando Herencia a nuestro proyecto Uber***

- De las clases anteriores uniremos las siguientes: user y driver, ya que estas dos clases contienen los mismos atributos y entonces quedaría así

Esta sería una Súperclase
class Account: 
    id
    name
    document
    email
    password
y las clases user y driver vendrían siendo las subclases

- y ahora uniremos para pagos las clases Card, PayPal, Cash, entonces la súper clase sería Payments y las subclases serían Card, PayPal, Cash, por lo tanto quedaría así:

class Payments:
    id

subclases Card, PayPal, Cash

- ahora para que la clase Car sea la súperclase uniremos las clases Uberx, UberBlack, UberPool, UberVan, porque tienen muchos atributos en común entonces quedaría así:

Class Car:
    id
    license
    driver
    passengers 

***Clase 17 Reto 2: analicemos un problema***

Imagina que nuestro sistema de adopciones creció y ahora ofrece adoptar pericos, loros, gatos y hamsters.

Genera un nuevo análisis, aplica herencia para abstraer mejor el problema y lograr modularidad en el software.

Comparte tus resultados en la sección de discusiones.

Hay una imagen que nombraré reto2 y ahí está cómo se podría hacerlo

- Módulo Clases, Objetos y Método Constructor

***Clase 18 Creando nuestras carpetas iniciales para el curso***

¡Hola! Ahora sí vamos a empezar a definir nuestras clases en 4 diferentes lenguajes de programación, pero antes de ello vamos primero a crear la estructura de nuestras 
carpetas.

La estructura de carpetas que estaremos manejando durante el curso será la siguiente:

CursoPOOUber
├── Java
├── JS
├── PHP
└── Python
Básicamente nuestra carpeta raíz será la carpeta CursoPOOUber y dentro crearemos las carpetas Java, JS, PHP y Python en las cuales iremos guardando nuestros archivos a
medida que avanzamos en el curso.

Configurando el workspace para Python
En una clase anterior instalamos Python, sin embargo, como estaremos guardando todo el código de este lenguaje dentro de la carpeta Python debemos informarle a 
Visual Studio Code que el código va a estar ahí, de esta forma podemos evitar problemas a futuro cuando usemos módulos.

Para hacer esto es muy sencillo, dentro de nuestra carpeta CursoPOOUber vamos a crear una nueva carpeta llamada .vscode (ojo, el punto al inicio del nombre es importante).
Dentro de esta carpeta vamos a crear un nuevo archivo llamado settings.json y dentro de este archivo vamos a poner la siguiente información:

{
    "python.autoComplete.extraPaths": ["./Python"],
}
De esta forma le estamos diciendo a nuestro editor de código que todos nuestros archivos de Python van a estar dentro de la carpeta Python, por tanto, él sabrá que 
cualquier módulo deberá leerlo desde esa carpeta, y no desde la carpeta raíz, lo cual evitará que te marque errores en el futuro 😄.

Es importante que cuando abras tu proyecto en Visual Studio Code, lo abras desde la carpeta CursoPOOUber, de esta forma, el editor de código te mostrará en el árbol de 
carpetas a tus 5 carpetas que has creado:

folder_structure.png
¡Estamos listos para empezar a codear! Nos vemos en las siguiente clase donde empezaremos a definir clases con Java y Python.

***Clase 19 Definiendo clases en Java y Python***

Se definieron las clases dentro de cada carpeta

***Clase 20 Definiendo Clases en JavaScript***

Si estás interesado en aprender JavaScript desde ahora debes saber que el concepto de clases no existía como tal hasta el nuevo estándar EcmaScript 6. 
El reto de encontrar sistemas construidos con este estándar es alto por esa razón te explicaré cuál fue por mucho tiempo su equivalente.

Los Prototipos fue la forma de crear clases en JavaScript y las representaremos partiendo de la declaración de una función.

Creemos nuestras clases:

Account
Car
Payment
Route
Para esto crearemos el siguiente sistema de archivos dentro de la carpeta JS de nuestro proyecto:

Account.js
Car.js
Payment.js
Route.js
index.js
El archivo index.js será el lugar equivalente al punto de entrada de la aplicación donde estaremos declarando nuestros objetos basado en las clases. 
Para esta clase lo dejaremos en blanco.

Ahora veamos el código archivo por archivo:

Account.js
Captura de pantalla 2019-01-13 a la(s) 2.56.24.png
Car.js
Captura de pantalla 2019-01-13 a la(s) 2.56.34.png
Payment.js
Captura de pantalla 2019-01-13 a la(s) 2.56.41.png
Route.js
Captura de pantalla 2019-01-13 a la(s) 2.56.56.png
Este es el enlace del código del proyecto: https://github.com/anncode1/Curso-POO-Platzi/tree/f5725787165b36cae579f94e428068039b554b0b/JS

En este código notarás el uso de la palabra reservada this. Normalmente cuando usamos la sintaxis punto siempre lo haremos a partir de un objeto instanciado, 
en este caso con this, se hace una simulación al objeto en cuestión, a pesar de que en ese momento visualmente sigue siendo una clase.

Captura de pantalla 2019-01-13 a la(s) 2.56.56.png
Digamos que se adelanta un poco al momento de ejecución y visualiza al objeto con sus atributos, más adelante verás la forma en que podemos asignar datos 
a un atributo del objeto en otros lenguajes y verás que es exactamente la misma sintaxis.

Si intentaramos poner this. en el momento de ejecución nos traería un listado de todos los componentes de la clase que en este caso son solo estos tres: id, init y end.

This hace referencia al objeto instanciado. Para comprender del todo esta última frase mira la siguiente clase donde hablamos de objetos.

Reto.
En la carpeta de nuestro proyecto PHP declara estas mismas clases: Puedes utilizar esta clase de apoyo: https://platzi.com/clases/1338-php/12929-programacion-orientada-a-objetos1172/
Inténtalo y compártenos tus resultados, compáralos con tus compañeros.

***Clase 21 Objetos, método constructor y su sintaxis en código***

Un objeto es una instancia de una clase, es decir, el objeto es el resultado de lo que se modeló, de los parámetros que dejamos ahí declarados entonces
usaremos los objetos para que estas clases tomen vida

Los objetos nos ayudan a crear instancia de una clase, el objeto es el resultado de lo que modelamos, de los parámetros declarados y usaremos los objetos para que nuestras
clases cobren vida.

Los métodos constructores dan un estado inicial al objeto y podemos añadirle algunos datos al objeto mediante estos métodos. Los atributos o elementos que pasemos
a través del constructor serán los datos mínimos que necesita el objeto para que pueda vivir.

creación de un objeto, ó cómo instanciarlo
- Java:
    - Ejemplo:
        - Person person = new Person();
- Python:
    Ejemplo:
        - persona = Person()

- JavaScript:
    Ejemplo:
        var person = new Person();

- PHP:
    - Ejemplo:
        $person = new Person();

- Método constructor:
    - Dar un estado inicial al objeto
    - Tiene el mismo nombre de la clase
    - Son los parámetros mínimos que necesita el objeto para que pueda vivir

    - Java:
        - Ejemplo:
            public Person(String name){
                this.name = name;
            }
    - Python:
        Ejemplo:
            def __init__(self, name):
                self.name = name

    - JavaScript:
        Ejemplo:
            function Person(name){
                this.name = name
            }

    - PHP:
        - Ejemplo:
            public function_construct($name){
                $this->name=name;
            }
- Cómo pasarle los datos a un objeto

- Java:
    - Ejemplo:
        Person person = new
        Person("Messi");
- Python:
    Ejemplo:
        person = Person("Messi")

- JavaScript:
    - Ejemplo:
        var person = new
        Person("Messi");

- PHP:
    - Ejemplo:
        $person = new Person("Messi")

***Clase 22 Objetos. Dando vida a nuestras clases en Java y Python***

Pasándole datos a una instancia, en java se hace así:
class Main {

    public static void main(String[] args) {
        System.out.println("Hola Mundo");
        Car car = new Car();
        car.license = "YVJ03D";
        car.driver = "Lionel Messi";
        car.passegenger = 4;
        car.printDataCar();

        Car car2 = new Car();
        car2.license = "XDE09D";
        car2.driver = "CR";
        car2.passegenger = 3;
        car.printDataCar();
    }
}

Pasándole datos a una instancia, en python se hace así:

from car import Car
if __name__ == '__main__':
    print("Hola mundo")
    car = Car()
    car.license = "XAED09D"
    car.driver = "Lionel Messi"
    #con este print de abajo me trae los datos dentro de un diccionario
    print(vars(car))

    #Nueva instancia de la clase Car

    car_two = Car()
    car_two.license = "YVJ03D"
    car_two.driver = "CR7"
    #Con los print de abajo me trae los datos normal, es decir, en string
    print(car_two.license)
    print(car_two.driver)
    #Con el print de abajo puedo decirle que me imprima todas las variables de la instancia y los trae en un diccionario
    #print(vars(car_two))

***Clase 23 Declarando un Método Constructor en Java y JavaScript***

si en visual Studio code le doy: html:5, me coloca algo como esto
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>

***Clase 24 JavaScript orientado a objetos, lo más nuevo***

A partir de las nuevas especificaciones del EcmaScript 6 ya podemos declarar una clase con la palabra reservada class, aunque es importante aclarar que estos no dejan de ser prototipos, sino todo lo contrario.

Además tendremos una palabra clave para definir un constructor, y dentro de este estarán las propiedades de nuestra clase definidas listas para inicializarse.

Transcribamos el código JavaScript que generamos en la clase anterior a este nuevo estándar.

La clase Car quedaría así:

1.png
Si quisiéramos declarar un método, en esta nueva sintaxis dejaremos de utilizar la palabra clave function.

Ahora veamos a la clase Account:

2.png
Y para finalizar aquí puedes ver las clases Route y Payment:

3.png
4.png
Notarás que para instanciar un objeto seguiremos usando la palabra clave new.

5.png
Y los resultados serán los mismos:

6.png
Aquí encuentras el código de este ejercicio: https://github.com/anncode1/Curso-POO-Platzi/tree/3.1.POOJS

***Clase 25 Declarando un método constructor en Python***

En Python encontrarás un concepto denominado Métodos Mágicos, estos métodos son llamados automática y estrictamente bajo ciertas reglas. El método constructor en Python forma parte de esta familia de métodos y como 
aprendimos en la clase anterior lo declaramos usando __init__, aunque si nos ponemos estrictos este método no construye el objeto en sí. El encargado de hacer esto es __new__ y el método __init__ se encargará de 
personalizar la instanciación de la clase, esto significa que lo que esté dentro de __init__ será lo primero que se ejecute cuando se cree un objeto de esta clase.

Para nuestro proyecto tenemos la necesidad de que algunas variables se inicialicen obligatoriamente cuando ocurra la instanciación. Así que declaremos el método __init__ en las clases de nuestro proyecto con las 
propiedades obligatorias.

Para la clase Account quedaría algo así, notarás que usamos la palabra clave self, esta es muy parecida a lo que venimos trabajando a otros lenguajes con this. Y como su nombre lo dice hace referencia a los datos 
que componen la clase, en este caso self.name está llamando al atributo name que se encuentra en la línea 3 de la clase y, le está asignando el dato que se pasa en el método __init__ de la línea 8.

class Account:
    id = int()
    name = str()
    document = str()
    email = str()
    password = str()

    def __init__(self, name, document):
        self.name = name
        self.document = document

Ahora veamos la clase Car:

imagen.png
class Car:
    id = int()
    license = str()
    driver = Account("","")
    passegenger = int()

    def __init__(self,license, driver):
        self.license = license
        self.driver = driver

Lo que notarás de diferente es que cambiamos el tipo de dato de driver, ahora es de tipo Account y como ves está solicitando los dos datos obligatorios para instanciar un objeto de este tipo. Esto lo verás más en 
acción en el próximo fragmento de código del archivo main.py. Además, mucho ojo, en la primera línea observamos que es importante importar la clase para poderla usar.

Nuestro archivo main.py ahora se verá así:

Captura de pantalla 2019-01-21 a la(s) 1.17.11.png
    
    car_three = Car("AMS234", Account("Kilyan Mbappe", "7Francés"))
    print(vars(car_three))
    print(vars(car_three.driver))

Observa que estamos importando las dos clases que usaremos y las estamos instanciando en los métodos constructores.

Los resultados serán los siguientes:

Captura de pantalla 2019-01-21 a la(s) 1.14.06.png
El código de este ejemplo lo encuentras en este enlace:
https://github.com/anncode1/Curso-POO-Platzi/tree/3.2.ConstructorPython

Reto 3.
Ahora que ya viste cómo creamos un método constructor en Python, mira esta clase https://platzi.com/clases/2034-php-poo/32133-polimorfismo/ y hazlo también para PHP. Compártenos tus resultados en la sección de 
discusiones.

- Módulo Herencia
***Clase 26 Aplicando herencia en lenguaje Java y PHP***

- Java:
    - La cuestión de herencia será definida a partir de la palabra clave o reservada extends
        - Ejemplo:
            class Student extends Person
- PHP:
    - Es exactamente igual que en Java
        - Ejemplo:
            class Student extends Person
-JavaScript:
    - Toma la clase hija, el prototipo y de inmediato la instancía como una clase padre
        - Ejemplo:
            studen.prototype = new Person();
- Python:
    - Recibe como parámetro o un parámetro dentro de la clase, por ejemplo en el siguiente caso la clase Student recibe la clase Person
        - Ejemplo:
            class Student(Person):

***Clase 27 Solución del reto de herencia en PHP***

Mirar en la carpeta de PHP

***Clase 28 Aplicando herencia en lenguaje Python y JavaScript***

Recuerdas que en Python la herencia se expresa de manera muy similar a un método constructor de otros lenguajes. Apliquemos herencia para nuestra familia Car, para esto crearemos las siguientes clases:

UberX.py
UberPool.py
UberBlack.py
UberVan.py
Captura de pantalla 2019-01-21 a la(s) 3.34.29.png
Captura de pantalla 2019-01-21 a la(s) 3.34.40.png
Captura de pantalla 2019-01-21 a la(s) 3.34.56.png
Captura de pantalla 2019-01-21 a la(s) 3.35.10.png
El código completo puedes verlo aquí: https://github.com/anncode1/Curso-POO-Platzi/tree/2cbdf9db470a98323328f8a21bf6a9de941d008e/Python

JavaScript
En clases anteriores te expliqué cómo ejecutar herencia en estándares anteriores al EcmaScript 6. Uno de los beneficios de utilizar este nuevo estándar que ejecutar herencia es tan simple como utilizar la palabra 
reservada extends.

Captura de pantalla 2019-01-21 a la(s) 4.10.32.png
Captura de pantalla 2019-01-21 a la(s) 4.10.48.png
Captura de pantalla 2019-01-21 a la(s) 4.11.01.png
Captura de pantalla 2019-01-21 a la(s) 4.11.18.png
Ahora para utilizar una de las clases y crear un objeto, por ejemplo de UberX, no olvides declarar la clase en el archivo index.html.

Captura de pantalla 2019-01-21 a la(s) 4.11.34.png
Nuestro ejemplo se verá así:

Captura de pantalla 2019-01-21 a la(s) 4.11.52.png
El código completo puedes verlo aquí: https://github.com/anncode1/Curso-POO-Platzi/tree/9251101bdc2722ed13f9d93cb432ba8e9aba17b4/JS

***Clase 29 Otros tipos de Herencia***

A partir de ahora las clases que estén siendo heredades las llamaremos familias.

Acabamos de aplicar herencia a la familia Car. Ahora apliquémosla a la familia Payment.

En clases anteriores te mencioné que otro punto de partida que puedes tomar para aplicar herencia es del hecho de que hay clases que lógicamente deberían estar en una familia, como es el caso de Payment.

Repasemos el diagrama de Payment

diagrama_familias_clase29.jpg
Notarás que a nivel de código parece inservible pero cuando estemos en el caso de uso Pagar un Viaje, probablemente en ese momento no sabremos cuál es el método de pago, y necesitemos ingresar un dato lo 
suficientemente genérico que conceptualmente nos dé la información que necesitamos, en este caso que es un Payment. Este es un tipo de Polimorfismo y uno de los principios SOLID del software que obedece a la 
Inyección de Dependencias. Lo veremos más adelante a detalle.

Ahora nos faltará crear las clases y aplicar su herencia.

***Clase 30 Reto 4***

Nos queda la Jerarquía Account pendiente.

Tomando como referencia nuestros diagramas. Plásmala en tu lenguaje de programación favorito.
Compártenos tus resultados.

1CBC2F61-08EB-4F0E-AE72-E13356C7E0EE.png

- Módulo Encapsulamiento

***Clase 31 Encapsulamiento***

El Encapsulamiento es hacer que un dato sea inviolable, inalterable cuando se le asigne un modificador de acceso.

Getters y Setters Python
E n python no existen como tal las variables privadas, pero se pueden “esconder” o volver privadas con solo colocarle doble guion bajo al nombre de la variable.

modificadores de acceso:
- private = Solo puede ser accedido por clases
+ public = Puede ser accedido por cualquier cosa, método,clase, etc
# protected = Puede ser accedido por Clases, Paquetes y Subclases
~ default = Puede ser accedido por Clases y Paquetes

***Clase 32 Encapsulando atributos en Java***

Ver los archivos de main.java y car.java

- Módulo Polimorfismo
***Clase 33 Generando polimorfismo en Java***

Es tener un método que se comparte con muchas clases pero cada clase le da utilidad como a ella le convenga o mejor le parezca, en otras palabras de acuerdo a su necesidad

Polimorfismo: Muchas formas. Poli = muchas, morfismo = formas. NO es Poliformismo

Es construir métodos con el mismo nombre pero con comportamiento diferente

***Clase 34 Generando polimorfismo en PHP***

- Módulo Cierre del curso
***Clase 35 El Diagrama UML de Uber***

***Clase 36 Conclusiones***

***Clase 37 Bonus: Qué es la Programación Orientada a Objetos***