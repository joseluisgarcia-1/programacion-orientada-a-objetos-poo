- Módulo Bienvenida e Introducción
***Clase 1 ¿Por qué aprender Programación Orientada a Objetos?***

- Vas a programar más rápido. Tener un análisis previo de lo que estás realizando te ayudará a generar código mucho más veloz

- Dejas de ser Programador Jr. Podrás responder preguntas como ¿Qué es encapsulamiento?, ¿Qué es Abstracción?, ¿Qué es Herencia?, ¿Qué es Polimorfismo? 
en futuras entrevistas de trabajo

- Dejar de Copiar y Pegar Código.

La programación orientada a objetos tiene cuatro características principales:

- Encapsulamiento. 
    - Quiere decir que oculta datos mediante código.
- Abstracción. 
    - Es como se pueden representar los objetos en modo de código.
- Herencia. 
    - Es donde una clase nueva se crea a partir de una clase existente.
- Polimorfismo.
    - Se refiere a la propiedad por la que es posible enviar mensajes sintácticamente iguales a objetos de tipos distintos.
En este curso, los pasos a seguir será.
Analisis
Plasmar
Programar
La mayoría solo aprende a hacer esto en un lenguajes de programación,aquí se tiene una variabilidad.

***Clase 2 ¿Qué resuelve la Programación Orientada a Objetos?***

La programación orientada a objetos nos ayuda a tapar o resolver muchos de los huecos que ha dejado la programación estructurada
La programación Orientada a Objetos nace de los problemas creados por la programación estructurada y nos ayuda a resolver cierto problemas como:

Código muy largo: A medida que un sistema va creciendo y se hace más robusta el código generado se vuelve muy extenso haciéndose difícil de leer, depurar, mantener.

Si algo falla, todo se rompe: Ya que con la programación estructurada el código se ejecuta secuencialmente al momento de que una de esas líneas fallara todo lo demás 
deja de funcionar.

Difícil de mantener.

La POO Nos va a simplificar la programación

***Clase 3 Paradigma Orientado a Objetos***

La Programación Orientada a Objetos viene de una filosofía o forma de pensar que es la Orientación a Objetos y 
esto surge a partir de los problemas que necesitamos plasmar en código.

Es analizar un problema en forma de objetos para después llevarlo a código, eso es la Orientación a Objetos.

Un paradigma es una teoría que suministra la base y modelo para resolver problemas. La paradigma de Programación Orientada a Objetos se compone de 4 elementos:

Clases
Propiedades
Métodos
Objetos
Y 4 Pilares:

Encapsulamiento
Abstracción
Herencia
Polimorfismo

***Clase 4 Lenguajes Orientados a Objetos***

***Clase 5 Instalando Visual Studio Code***

***Clase 6 Diagramas de Modelado***

***Clase 7 Qué es UML***

- Módulo Orientación a Objetos
***Clase 8 Objetos***

***Clase 9 Abstracción y Clases***

***Clase 10 Modularidad***

***Clase 11 Analizando Uber en Objetos***

***Clase 12 Reto 1: identificando objetos***

- Módulo Programación Orientada a Objetos. Análisis
***Clase 13 Clases en UML y su sintaxis en código***

***Clase 14 Modelando nuestros objetos Uber***

***Clase 15 ¿Qué es la herencia?***

***Clase 16 Aplicando Herencia a nuestro proyecto Uber***

***Clase 17 Reto 2: analicemos un problema***

- Módulo Clases, Objetos y Método Constructor

***Clase 18 Creando nuestras carpetas iniciales para el curso***

***Clase 19 Definiendo clases en Java y Python***

***Clase 20 Definiendo Clases en JavaScript***

***Clase 21 Objetos, método constructor y su sintaxis en código***

***Clase 22 Objetos. Dando vida a nuestras clases en Java y Python***

***Clase 23 Declarando un Método Constructor en Java y JavaScript***

***Clase 24 JavaScript orientado a objetos, lo más nuevo***

***Clase 25 Declarando un método constructor en Python***

- Módulo Herencia
***Clase 26 Aplicando herencia en lenguaje Java y PHP***

***Clase 27 Solución del reto de herencia en PHP***

***Clase 28 Aplicando herencia en lenguaje Python y JavaScript***

***Clase 29 Otros tipos de Herencia***

***Clase 30 Reto 4***

- Módulo Encapsulamiento

***Clase 31 Encapsulamiento***

***Clase 32 Encapsulando atributos en Java***

- Módulo Polimorfismo
***Clase 33 Generando polimorfismo en Java***

***Clase 34 Generando polimorfismo en PHP***

- Módulo Cierre del curso
***Clase 35 El Diagrama UML de Uber***

***Clase 36 Conclusiones***

***Clase 37 Bonus: Qué es la Programación Orientada a Objetos***